on:
  push:

#on ajoute au token le droit d'écrire la release (modifie la liste des droits auxquels ce token nous donne accès)
permissions:
  contents: write
 
jobs:
#1er job:
  get-version:
  # se base sur un projet de Flavien
    uses: shiipou/github-actions/.github/workflows/get-version.yml@main      

#2ème job: 
  build:
   name: Spring build
   runs-on: ubuntu-latest
   #si get-version voit un commit qui permet une release (montée de version): fait le build, sinon fait pas le build
   if: ${{ needs.get-version.outputs.will-release == 'true' }}
   #ici je définis needs:
   needs: 
   #va chercher le resultat du 1er job
      - get-version
   steps:
     #step 1
     - name: Print version
       run : |
         echo "${{ needs.get-version.outputs.version }}"
         echo "${{ needs.get-version.outputs.changelogs }}"
         echo "${{ needs.get-version.outputs.is-pre-release }}"
         echo "${{ needs.get-version.outputs.will-release }}"
     #step 2
     - name: Setup java
       uses: actions/setup-java@v4
       with:
         distribution: 'temurin'
         java-version: 17
     #step 3
     - name: Setup gradle
       uses: gradle/actions/setup-gradle@v4
     #step 4
     - name: Checkout clone source code
       uses: actions/checkout@v4
     #step 5
     - name: Build with Gradle
       env: 
         VERSION : "${{ needs.get-version.outputs.version }}"
       run: ./gradlew bootjar
      #- run: ls -lia build/libs
     #step 6
     - uses: actions/upload-artifact@v4
       with:
        name: spring
        path: build/libs
        
  test:
     name: Spring test
     runs-on: ubuntu-latest
     #continue même si les tests sont pas bons (le temps que je puisse dev tranquille)
     continue-on-error: true

     services: 
       postgres:
         image: postgres
         env:
           POSTGRES_DB: postgres
           POSTGRES_USER: postgres
           POSTGRES_PASSWORD: postgres
         options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
     steps:
       - name: Print version
         # pipe pour mettre plusieurs echo dans le run
         run: |
           echo "${{ needs.get-version.outputs.version }}"
           echo "${{ needs.get-version.outputs.changelogs }}"
           echo "${{ needs.get-version.outputs.is-prerelease }}"
           echo "${{ needs.get-version.outputs.will-release }}"
       - name: Setup java
         uses: actions/setup-java@v4
         with:
           distribution: 'temurin'
           java-version: 17
       - name: Setup gradle
         uses: gradle/actions/setup-gradle@v4
       - name: Checkout clone source code
         uses: actions/checkout@v4
       - name: Build with Gradle
         run: ./gradlew test
         
  release: 
    name: Release
    runs-on: ubuntu-latest
    #dépend de get-version et de build
    needs: 
      - get-version
      - build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          #télécharge l'artifact qui oprte le nom spring (défini dans le build)
          name: spring
          #endroit où ça se télécharge
          path: build/
      - name: Create Github Release
        env:
        #récupérer la version
          VERSION: "${{ needs.get-version.outputs.version }}"
        #récupérer le nom du repo sous format owner/repository
          REPO: "${{ github.repository }}"
        #récupérer le numéro du commit qui a déclenché le workflow
          COMMIT : "${{ github.sha }}"
        #token créé par github pour le commit
        #pas besoin de le spécifier dans la commande d'en dessous car 'gh release create' va le lire automatiquement, 
        #contrairement aux autres variables d'environnement du dessus
          GH_TOKEN: "${{ github.token }}"
      #pipe pour commandes sur plusieurs lignes
      #on spécifie le numéro de commit car on veut que le workflow se lance sur le commit qui l'a déclenché 
      #et pas sur le dernier commit (au cas où les tests du dernier commit ne passent pas par exemple, 
      #on veut pas que ça impacte notre commit parce que peut-être que nous ça passe!)
        run: |
          gh release create --repo $REPO --target $COMMIT $VERSION build/*
